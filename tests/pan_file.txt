Test the pan_file module. Operate over the Pan file.

First, test how we iterate over the header. The pan_file allows us to
iterate over it. It's probably not thread-safe, but it keeps the user
code simple.

    >>> import sys, os
    >>> from pan_file import pan_file
    >>> from tests.test_wrapper import testfile
    >>> p = pan_file("test.py")
    >>> f = testfile()
    >>> f.write('# This line must be skipped\n')
    >>> f.write('@{this=line must not be skipped}\n')
    >>> f.write('unique template foo;')
    >>> p.file = f
    >>> for i in p: print i
    ('this', 'line must not be skipped')
    >>>

Now, test our functions get called.

    >>> def thisf(*x):
    ...    print x
    ...    return []
    >>> p = pan_file("test.py", this=thisf)
    >>> p.actions.has_key('this')
    True
    >>> p.actions['this'] == thisf
    True
    >>> f.seek(0, 0)
    >>> p.file = f
    >>> p.process()
    ('line must not be skipped',)
    >>> len(p.body)
    0

Test that registering different actions truly calls different
functions

    >>> f = testfile()
    >>> f.write('# This line must be skipped\n')
    >>> f.write('@{this=line must not be skipped}\n')
    >>> f.write('@{that=line will be processed}\n')
    >>> f.write('@{blah=will not be called}\n')
    >>> f.write('@{bleh=will not be called either}\n')
    >>> f.write('template bar;\n')
    >>> def f1 (x): return [ 'I am in this', x ]
    >>> def f2 (x): return [ 'I am in that', x ]
    >>> p = pan_file("test.py", this=f1, that=f2)
    >>> p.file = f
    >>> p.open
    True
    >>> p.actions.get('this') == f1
    True
    >>> p.actions.get('that') == f2
    True
    >>> p.process()
    >>> len(p.body)
    4
    >>> p.body[0]
    'I am in this'
    >>> p.body[1]
    'line must not be skipped'
    >>> p.body[2]
    'I am in that'
    >>> p.body[3]
    'line will be processed'
    >>> p.write_file()
    True
    >>> print p.file.getvalue()
    # This line must be skipped
    @{this=line must not be skipped}
    @{that=line will be processed}
    @{blah=will not be called}
    @{bleh=will not be called either}
    template bar;
    I am in this
    line must not be skipped
    I am in that
    line will be processed

And we write only once to the file. Successive operations on the same
file do nothing.

    >>> p.process()
    >>> p.write_file()
    False
    >>> st = p.file.getvalue()
    >>> p = pan_file("test.py", this=f1, that=f2)
    >>> p.file=testfile(st)
    >>> p.process()
    >>> p.write_file()
    False
